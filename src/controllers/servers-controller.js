// External Modules
const pool = require('../db/postgres');
const { cloneDeep } = require('lodash');
// Helpers
const { sendPgQuery, generateUpdateServerQuery } = require('../helpers/database');
const { renderResponse, renderError } = require('../helpers/renders');
const { validateHttpPrefix } = require('../helpers/validations');
// Queries
const serversQueries = require('../queries/servers');
const { getLastRequestsFromHistoryByServerId, deleteHistoryByServerId } = require('../queries/history');

const getAllServers = async (req, res) => {
  try {
    const queryResults = await sendPgQuery(pool, serversQueries.getAllServers);
    renderResponse(res, 200, 'Successfully fetched servers', queryResults);
  } catch (err) {
    console.error(err);
    renderError(res, err);
  }
};

const createServer = async (req, res) => {
  const http_url = validateHttpPrefix(req.body.http_url); // add http prefix if not present.
  const { name } = req.body; // name will not be null by SQL constraint.
  const is_healthy = req.body.is_healthy ?? false; // if is_healthy is not defined, set to false by default.

  try {
    const queryResults = await sendPgQuery(pool, serversQueries.createServer, [http_url, name, is_healthy]);
    renderResponse(res, 200, 'Server successfully created', queryResults);
  } catch (err) {
    console.error(err);
    renderError(res, err);
  }
};

const updateServerById = async (req, res) => {
  try {
    // if server_id not specified, request will be failed to sent, hence we don't need validation.
    const server_id = req.params.server_id;

    // will be generated by helper function based on req.body data
    const updateServerQuery = generateUpdateServerQuery(req.body, server_id);

    const queryResults = await sendPgQuery(pool, updateServerQuery);
    renderResponse(res, 200, 'Server successfully updated', queryResults);
  } catch (err) {
    console.error(err);
    renderError(res, err);
  }
};

const getServerById = async (req, res) => {
  try {
    const server_id = req.params.server_id;

    let serverInfo = await sendPgQuery(pool, serversQueries.getServerById, [server_id]); // basic server info

    // One server must always return if ID matches.
    if (serverInfo.length !== 1) {
      return renderResponse(res, 400, `server_id = ${server_id} does not exist in 'servers' table.`, {});
    }

    // To be handled as an object instead of array
    serverInfo = serverInfo[0];

    // Will fetch last 10 requests. Empty array if none.
    serverLastTenHistory = await sendPgQuery(pool, getLastRequestsFromHistoryByServerId, [server_id, 10]);

    serverInfo['history'] = cloneDeep(serverLastTenHistory); // to avoid shallow copy
    renderResponse(res, 200, 'Server successfully fetched', serverInfo);
  } catch (err) {
    console.error(err);
    renderError(res, err);
  }
};

const deleteServerById = async (req, res) => {
  try {
    const server_id = req.params.server_id;

    // Delete history before deleting the server (due to foreign key existence)
    await sendPgQuery(pool, deleteHistoryByServerId, [server_id]);

    const deletedServer = await sendPgQuery(pool, serversQueries.deleteServerById, [server_id]);

    if (deletedServer.length < 1) {
      return renderResponse(res, 400, `server_id = ${server_id} was not deleted`, {});
    }

    renderResponse(res, 200, 'Server successfully deleted', deletedServer);
  } catch (err) {
    console.error(err);
    renderError(res, err);
  }
};

module.exports = {
  getAllServers,
  createServer,
  updateServerById,
  getServerById,
  deleteServerById,
};
